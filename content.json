{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-04-12T06:21:49.000Z","updated":"2020-04-12T06:22:38.929Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-12T05:49:34.000Z","updated":"2020-04-12T05:55:49.236Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"leetcode","slug":"leetcode","date":"2020-04-21T01:07:54.739Z","updated":"2020-04-21T01:33:02.575Z","comments":true,"path":"2020/04/21/leetcode/","link":"","permalink":"http://yoursite.com/2020/04/21/leetcode/","excerpt":"83.删除排序链表中的重复元素","text":"83.删除排序链表中的重复元素 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。 示例 1: 输入: 1-&gt;1-&gt;2输出: 1-&gt;2 up主（洛阳高志远）的答案： 12345678910111213141516171819class Solution &#123;public: ListNode* deleteDuplicates(ListNode* head) &#123; ListNode* cur&#x3D;head; while(cur-&gt;next !&#x3D;nullptr&amp;&amp;cur !&#x3D;nullptr) &#123; if(cur-&gt;val&#x3D;&#x3D;cur-&gt;next-&gt;val) &#123; cur-&gt;next&#x3D;cur-&gt;next-&gt;next; &#125; else &#123; cur&#x3D;cur-&gt;next; &#125; &#125; return head; &#125;&#125;; 我在他的基础上改进了一个问题：第五行，或运算符，当左边为假时，不再执行右边的代码。所以，先判定cur是否为空，不然先判定cur下一个元素是否为空则跳过了cur本身是否为空的判定，导致程序结果对一个空指针进行访问 123456789101112131415161718class Solution &#123;public: ListNode* deleteDuplicates(ListNode* head) &#123; ListNode* cur&#x3D;head; while(cur !&#x3D;nullptr &amp;&amp;cur-&gt;next !&#x3D;nullptr) &#123; if(cur-&gt;val&#x3D;&#x3D;cur-&gt;next-&gt;val) &#123; cur-&gt;next&#x3D;cur-&gt;next-&gt;next; &#125; else &#123; cur&#x3D;cur-&gt;next; &#125; &#125; return head; &#125;&#125;; 运行结果：执行用时：16 ms内存消耗：7.7 MB","categories":[],"tags":[]},{"title":"第三篇文章","slug":"第三篇文章","date":"2020-04-11T14:04:42.150Z","updated":"2020-04-12T08:24:20.773Z","comments":true,"path":"2020/04/11/第三篇文章/","link":"","permalink":"http://yoursite.com/2020/04/11/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"title:第三章：一些小设置","text":"title:第三章：一些小设置 第三章-对博客的一些设置1.写博客目前我在用的文本编辑https://marxi.co/这是一个在线的Markdown文本编辑的网页，因为博客上的文本文件都是md结尾的，也就是markdown。 2.将数据保存本地将你在这个网页写好的数据ctrl+a全选复制，在之前创建的blog文件夹中找到source，再找到_posts，这里就可以看到你博客上的文章，现在，你可以新建一个文本文件，记住文件要以md结尾，接着，用vscode或者nodepad++打开该文件，将复制好的内容直接粘贴。保存即可 其中上下三个—之间可以写一个标题。 3.上传依旧是三部曲：在get bash here 中依次输入hexo clean ,hexo g可以hexo s看看本地有没有生成，接着hexo d上传到仓库，过一会刷新一下你的博客就会出现了 4.更改主题https://github.com/fi3ework/hexo-theme-archer以我在用的主题为例，点进去，其实可以看到它教你怎样安装了。 5.更改头像找到blog下的themes文件，找到你当前用的主题文件夹，打开，可以看到一个叫_config.yml的文件，这个和blog根目录下的文件名相同，但这个是主题配置文件。以vscode或notepad++打开它，其中找到avatar，这个就是头像，更改你想换的头像链接，保存。接着就是hexo clean,hexo g,hexo s,hexo d了，过一会就会生成了。 看不懂的话就看这个小姐姐的视频，简单明了https://www.bilibili.com/video/BV1zp411R7gz?t=1849","categories":[],"tags":[]},{"title":"第二篇文章","slug":"第二篇文章","date":"2020-04-11T06:04:59.438Z","updated":"2020-04-12T08:24:30.033Z","comments":true,"path":"2020/04/11/第二篇文章/","link":"","permalink":"http://yoursite.com/2020/04/11/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"title：第二章-连接仓库","text":"title：第二章-连接仓库 将本地数据部署到云端—上一章我们介绍了在本地搭建一个服务器并且成功运行测试，这次我们把它部署到云端，让别人也可以访问我们的网站，我是部署到github的，网上有些人推荐部署到国内的coding，也就是腾讯云，或者阿里云，我自己一开始是试着搞coding，但是我觉得太麻烦了就放弃了，还是选择了github。 1.github仓库首先，部署到github总该有个账号吧，注册登录后，直接右上角找到new repository，即创建一个仓库(注意！仓库命名开头一定要是你自己的昵称)。这个仓库就是存你hexo数据的地方,相当于一个有我们博客数据的云文件,现在我们继续回到bit bash小黑框中进行操作,输入cnpm install –save hexo-deployer-git安装git插件。这个插件相当于是沟通你本地数据与github仓库的通道,之后在每次本地数据编辑完后都要用到它,现在有了通道,本地数据,还有部署的仓库,只差怎样部署了。 2.修改配置文件右键blog目录下的_config.yml文件，选择用notepad++,或者vscode，没有的话就下载一个吧，尽量不要用记事本。我用的第一个。打开后拉到最底下，找到deploy: type: git repo: https://github.com/codesun99/codesun99.github.io.git branch: master类似于这种格式，deploy下面没有的就自己把代码打上去，其中冒号后面要加一个空格。repo这一行写上你github新建仓库的地址。这步也可以在命令行中实现，我不会。 3.部署到仓库在小黑框输入hexo d进行最后的部署到远端的操作。这个过程中它会让你输入你的github昵称和密码，到最后如果你看到有deploy done：git说明成功了，这是你刷新一下你的github仓库，可以看到多了一些东西，其实就是博客生成的内容。这时候，你把仓库名的网址后面的部分复制出来。像我的github网址就是https://github.com/codesun99/codesun99.github.io，这时把最后一个斜杠后面的部分，也就是codesun99.github.io拿出来，复制到浏览器直接访问，就可以看到你新建好的博客啦！","categories":[],"tags":[]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-04-10T03:03:55.522Z","updated":"2020-04-12T08:20:11.264Z","comments":true,"path":"2020/04/10/我的第一篇博客文章/","link":"","permalink":"http://yoursite.com/2020/04/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"title:第一章-关于本地环境的搭建","text":"title:第一章-关于本地环境的搭建 hexo+next主题搭建及美化(win10)首先，十分感谢羊哥（codesheep）的视频：手把手教你创建个人博客https://www.bilibili.com/video/BV1Yb411a7ty，让我能够如此轻易的创建了一个属于自己的博客。 之前我再朋友圈看到班长创建了一个博客，自己原本也想有个地方存储一下自己的学习心得，代码啊什么的，我也在网上找了许多的教程，但是质量都是参差不齐，理解和操作起来有些困难。后来看到羊哥的视频，让我感觉到即使我不会命令行操作，也能够理解其中的意思。 ##搭建 软件准备1.node.js因为 hexo 是基于 node 框架的，所以呢，我们首先需要下载安装node.js。下载地址：https://nodejs.org/en/ 选择左边LTS那个。 2.gitgit官方网站：https://git-scm.com/download/win 根据系统选择位数。官方下载安装包可能会很慢，这是我们选择国内的淘宝npm镜像下载：https://npm.taobao.org/mirrors/git-for-windows/ 安装就一直点击下一步，安装在哪个盘都无所谓，设置就系统默认就行。 3.hexo在你喜欢的一个盘内新建一个文件夹，名字叫blog，然后在空白处右键鼠标，有个get bash here的选项，点它。这时出来一个黑框，输入node -v查看一下node的版本，输入npm -v查看npm的版本，注意中间有空格。 检查是否安装成功，没有的话就重新安装node。 4.cnpm接下来安装cnpm,之后要用它装hexo。在终端上（就是小黑框）输入npm install -g cnpm –registry=https://registry.npm.taobao.org （淘宝镜像）不用这个的话下载速度慢而且容易失败。 安装好后输入cnpm 和cnpm -v，如果成功可以看到相应的一些文件。 5.hexo小黑框输入cnpm install -g hexo-cli，安装好用hexo -v验证一下。出现一列数据就是成功了。 至此，所需软件都安装完成。本地搭建现在输入pwd，看看当前文件在什么位置，应该就在你创建的路径中。然后，运行命令hexo init （这步是关键），结果你可以看到你创建的blog文件里多了一些东西（都是hexo为你生成的），这个文件夹相当于你以后的博客文件夹，如果有什么步骤做错了，可以直接把blog删掉重来。 运行测试最后，有三个命令会经常用到hexo clean //清理缓存文件hexo g//生成文件hexo s//运行本地服务器 第三步运行服务器后，会出现hexo is running at http://localhost.4000.press Ctrl+c to stop 这时，你打开浏览器，在网址栏输入localhost.4000。如果可以看到hexo为你生成的hello界面，说明本地环境搭建完成，你成功了。 其余内容请看下一章。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-09T15:08:16.499Z","updated":"2020-04-12T06:27:11.345Z","comments":true,"path":"2020/04/09/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"我的第一篇博客文章","slug":"我的第一篇博客文章","permalink":"http://yoursite.com/tags/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"},{"name":"第二篇文章","slug":"第二篇文章","permalink":"http://yoursite.com/tags/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"},{"name":"第三篇文章","slug":"第三篇文章","permalink":"http://yoursite.com/tags/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"}]}],"categories":[],"tags":[{"name":"我的第一篇博客文章","slug":"我的第一篇博客文章","permalink":"http://yoursite.com/tags/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"},{"name":"第二篇文章","slug":"第二篇文章","permalink":"http://yoursite.com/tags/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"},{"name":"第三篇文章","slug":"第三篇文章","permalink":"http://yoursite.com/tags/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"}]}